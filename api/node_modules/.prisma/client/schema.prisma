// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  nickname  String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Article   Article[]
  Product   Product[]
  Comment   Comment[]
  Like      Like[]
}

model Article {
  id             Int       @id @default(autoincrement())
  writer         User      @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId       Int
  title          String
  content        String
  image          String?
  ArticleComment Comment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  likes          Like[]
}

model Product {
  id             Int       @id @default(autoincrement())
  owner          User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        Int
  name           String
  description    String
  price          Int
  tags           String[]
  images         String[]
  ProductComment Comment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  likes          Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  writer    User     @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId  Int
  content   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@unique([userId, articleId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
}
