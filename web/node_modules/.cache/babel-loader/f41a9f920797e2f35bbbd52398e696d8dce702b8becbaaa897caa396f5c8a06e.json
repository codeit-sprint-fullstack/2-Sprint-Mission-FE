{"ast":null,"code":"var _jsxFileName = \"/Users/godiswithyou/Downloads/FS-PandaMarket-Template-10-main 2/web/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useCallback, useContext, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { signIn as requestSignIn, signUp as requestSignUp, getMe } from \"../api/auth\";\nimport { clearTokens, setTokens } from \"../utils/authToken\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  signup: ({\n    email,\n    nickname,\n    password,\n    passwordConfirmation\n  }) => {},\n  signin: ({\n    email,\n    password\n  }) => {},\n  signout: () => {}\n});\n\n/**\n * 소셜 로그인을 한 경우, 백엔드에서는 인증 토큰을 쿼리 스트링에 담아서 리다이렉트해 줍니다.\n * 쿼리 스트링으로 받은 Access Token과 Refresh Token을 로컬스토리지에 저장하고\n * 쿼리 스트링을 지운 주소로 이동한다.\n */\nfunction useTokensFromParams() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    if (searchParams.has('at') && searchParams.has('rt')) {\n      setTokens({\n        accessToken: searchParams.get('at'),\n        refreshToken: searchParams.get('rt')\n      });\n      const newPath = location.pathname; // 현재 경로에서 쿼리 파라미터를 제외한 경로만 사용\n      navigate(newPath, {\n        replace: true\n      }); // 새 경로로 이동\n    }\n  }, [location.pathname, location.search, navigate]);\n}\n_s(useTokensFromParams, \"fPjCxODVr6jVvib6o2c9VLE4s84=\", false, function () {\n  return [useLocation, useNavigate];\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  useTokensFromParams();\n  const queryClient = useQueryClient();\n  const {\n    data: user\n  } = useQuery({\n    queryKey: [\"me\"],\n    queryFn: async () => {\n      const user = await getMe();\n      return user;\n    },\n    retry: 2\n  });\n  const signup = useCallback(async ({\n    email,\n    nickname,\n    password,\n    passwordConfirmation\n  }) => {\n    await requestSignUp({\n      email,\n      nickname,\n      password,\n      passwordConfirmation\n    });\n    queryClient.invalidateQueries({\n      queryKey: [\"me\"]\n    });\n  }, [queryClient]);\n  const signin = useCallback(async ({\n    email,\n    password\n  }) => {\n    await requestSignIn({\n      email,\n      password\n    });\n    queryClient.invalidateQueries({\n      queryKey: [\"me\"]\n    });\n  }, [queryClient]);\n  const signout = useCallback(() => {\n    clearTokens();\n    queryClient.invalidateQueries({\n      queryKey: [\"me\"]\n    });\n  }, [queryClient]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signup,\n      signin,\n      signout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"UBfK4iHgO9eCD1ifdRfIoVgVzsE=\", false, function () {\n  return [useTokensFromParams, useQueryClient, useQuery];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s3();\n  return useContext(AuthContext);\n};\n_s3(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useCallback","useContext","useEffect","useQuery","useQueryClient","useLocation","useNavigate","signIn","requestSignIn","signUp","requestSignUp","getMe","clearTokens","setTokens","jsxDEV","_jsxDEV","AuthContext","user","signup","email","nickname","password","passwordConfirmation","signin","signout","useTokensFromParams","_s","location","navigate","searchParams","URLSearchParams","search","has","accessToken","get","refreshToken","newPath","pathname","replace","AuthProvider","children","_s2","queryClient","data","queryKey","queryFn","retry","invalidateQueries","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s3","$RefreshReg$"],"sources":["/Users/godiswithyou/Downloads/FS-PandaMarket-Template-10-main 2/web/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { signIn as requestSignIn, signUp as requestSignUp, getMe } from \"../api/auth\";\nimport { clearTokens, setTokens } from \"../utils/authToken\";\n\nconst AuthContext = createContext({\n  user: null,\n  signup: ({ email, nickname, password, passwordConfirmation }) => { },\n  signin: ({ email, password }) => { },\n  signout: () => { },\n});\n\n/**\n * 소셜 로그인을 한 경우, 백엔드에서는 인증 토큰을 쿼리 스트링에 담아서 리다이렉트해 줍니다.\n * 쿼리 스트링으로 받은 Access Token과 Refresh Token을 로컬스토리지에 저장하고\n * 쿼리 스트링을 지운 주소로 이동한다.\n */\nfunction useTokensFromParams() {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    \n    if (searchParams.has('at') && searchParams.has('rt')) {\n      setTokens({ accessToken: searchParams.get('at'), refreshToken: searchParams.get('rt') });\n      const newPath = location.pathname; // 현재 경로에서 쿼리 파라미터를 제외한 경로만 사용\n      navigate(newPath, { replace: true }); // 새 경로로 이동\n    }\n  }, [location.pathname, location.search, navigate]);\n}\n\nexport const AuthProvider = ({ children }) => {\n  useTokensFromParams();\n\n  const queryClient = useQueryClient();\n  const { data: user } = useQuery({\n    queryKey: [\"me\"],\n    queryFn: async () => {\n      const user = await getMe();\n      return user;\n    },\n    retry: 2,\n  });\n\n  const signup = useCallback(\n    async ({ email, nickname, password, passwordConfirmation }) => {\n      await requestSignUp({\n        email,\n        nickname,\n        password,\n        passwordConfirmation,\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"me\"],\n      });\n    },\n    [queryClient]\n  );\n\n  const signin = useCallback(\n    async ({ email, password }) => {\n      await requestSignIn({\n        email,\n        password,\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"me\"],\n      });\n    },\n    [queryClient]\n  );\n\n  const signout = useCallback(() => {\n    clearTokens();\n    queryClient.invalidateQueries({\n      queryKey: [\"me\"],\n    });\n  }, [queryClient]);\n\n  return (\n    <AuthContext.Provider value={{ user, signup, signin, signout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}