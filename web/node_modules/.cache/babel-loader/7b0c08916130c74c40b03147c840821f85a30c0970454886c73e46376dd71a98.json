{"ast":null,"code":"// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#mutations = /* @__PURE__ */new Map();\n    this.#mutationId = Date.now();\n  }\n  #mutations;\n  #mutationId;\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    const scope = scopeFor(mutation);\n    const mutations = this.#mutations.get(scope) ?? [];\n    mutations.push(mutation);\n    this.#mutations.set(scope, mutations);\n    this.notify({\n      type: \"added\",\n      mutation\n    });\n  }\n  remove(mutation) {\n    const scope = scopeFor(mutation);\n    if (this.#mutations.has(scope)) {\n      const mutations = this.#mutations.get(scope)?.filter(x => x !== mutation);\n      if (mutations) {\n        if (mutations.length === 0) {\n          this.#mutations.delete(scope);\n        } else {\n          this.#mutations.set(scope, mutations);\n        }\n      }\n    }\n    this.notify({\n      type: \"removed\",\n      mutation\n    });\n  }\n  canRun(mutation) {\n    const firstPendingMutation = this.#mutations.get(scopeFor(mutation))?.find(m => m.state.status === \"pending\");\n    return !firstPendingMutation || firstPendingMutation === mutation;\n  }\n  runNext(mutation) {\n    const foundMutation = this.#mutations.get(scopeFor(mutation))?.find(m => m !== mutation && m.state.isPaused);\n    return foundMutation?.continue() ?? Promise.resolve();\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n  getAll() {\n    return [...this.#mutations.values()].flat();\n  }\n  find(filters) {\n    const defaultedFilters = {\n      exact: true,\n      ...filters\n    };\n    return this.getAll().find(mutation => matchMutation(defaultedFilters, mutation));\n  }\n  findAll(filters = {}) {\n    return this.getAll().filter(mutation => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    const pausedMutations = this.getAll().filter(x => x.state.isPaused);\n    return notifyManager.batch(() => Promise.all(pausedMutations.map(mutation => mutation.continue().catch(noop))));\n  }\n};\nfunction scopeFor(mutation) {\n  return mutation.options.scope?.id ?? String(mutation.mutationId);\n}\nexport { MutationCache };","map":{"version":3,"names":["notifyManager","Mutation","matchMutation","noop","Subscribable","MutationCache","constructor","config","mutations","Map","mutationId","Date","now","build","client","options","state","mutation","mutationCache","defaultMutationOptions","add","scope","scopeFor","get","push","set","notify","type","remove","has","filter","x","length","delete","canRun","firstPendingMutation","find","m","status","runNext","foundMutation","isPaused","continue","Promise","resolve","clear","batch","getAll","forEach","values","flat","filters","defaultedFilters","exact","findAll","event","listeners","listener","resumePausedMutations","pausedMutations","all","map","catch","id","String"],"sources":["/Users/godiswithyou/Downloads/FS-PandaMarket-Template-10-main 2/web/node_modules/@tanstack/query-core/src/mutationCache.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\nexport type MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Map<string, Array<Mutation<any, any, any, any>>>\n  #mutationId: number\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = new Map()\n    this.#mutationId = Date.now()\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    const scope = scopeFor(mutation)\n    const mutations = this.#mutations.get(scope) ?? []\n    mutations.push(mutation)\n    this.#mutations.set(scope, mutations)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    const scope = scopeFor(mutation)\n    if (this.#mutations.has(scope)) {\n      const mutations = this.#mutations\n        .get(scope)\n        ?.filter((x) => x !== mutation)\n      if (mutations) {\n        if (mutations.length === 0) {\n          this.#mutations.delete(scope)\n        } else {\n          this.#mutations.set(scope, mutations)\n        }\n      }\n    }\n\n    this.notify({ type: 'removed', mutation })\n  }\n\n  canRun(mutation: Mutation<any, any, any, any>): boolean {\n    const firstPendingMutation = this.#mutations\n      .get(scopeFor(mutation))\n      ?.find((m) => m.state.status === 'pending')\n\n    // we can run if there is no current pending mutation (start use-case)\n    // or if WE are the first pending mutation (continue use-case)\n    return !firstPendingMutation || firstPendingMutation === mutation\n  }\n\n  runNext(mutation: Mutation<any, any, any, any>): Promise<unknown> {\n    const foundMutation = this.#mutations\n      .get(scopeFor(mutation))\n      ?.find((m) => m !== mutation && m.state.isPaused)\n\n    return foundMutation?.continue() ?? Promise.resolve()\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return [...this.#mutations.values()].flat()\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    ) as Mutation<TData, TError, TVariables, TContext> | undefined\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused)\n\n    return notifyManager.batch(() =>\n      Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop)),\n      ),\n    )\n  }\n}\n\nfunction scopeFor(mutation: Mutation<any, any, any, any>) {\n  return mutation.options.scope?.id ?? String(mutation.mutationId)\n}\n"],"mappings":";AAAA,SAASA,aAAA,QAAqB;AAC9B,SAASC,QAAA,QAAgB;AACzB,SAASC,aAAA,EAAeC,IAAA,QAAY;AACpC,SAASC,YAAA,QAAoB;AAgFtB,IAAMC,aAAA,GAAN,cAA4BD,YAAA,CAAoC;EAIrEE,YAAmBC,MAAA,GAA8B,CAAC,GAAG;IACnD,MAAM;IADW,KAAAA,MAAA,GAAAA,MAAA;IAEjB,KAAK,CAAAC,SAAA,GAAa,mBAAIC,GAAA,CAAI;IAC1B,KAAK,CAAAC,UAAA,GAAcC,IAAA,CAAKC,GAAA,CAAI;EAC9B;EAPA,CAAAJ,SAAA;EACA,CAAAE,UAAA;EAQAG,MACEC,MAAA,EACAC,OAAA,EACAC,KAAA,EAC+C;IAC/C,MAAMC,QAAA,GAAW,IAAIhB,QAAA,CAAS;MAC5BiB,aAAA,EAAe;MACfR,UAAA,EAAY,EAAE,KAAK,CAAAA,UAAA;MACnBK,OAAA,EAASD,MAAA,CAAOK,sBAAA,CAAuBJ,OAAO;MAC9CC;IACF,CAAC;IAED,KAAKI,GAAA,CAAIH,QAAQ;IAEjB,OAAOA,QAAA;EACT;EAEAG,IAAIH,QAAA,EAA8C;IAChD,MAAMI,KAAA,GAAQC,QAAA,CAASL,QAAQ;IAC/B,MAAMT,SAAA,GAAY,KAAK,CAAAA,SAAA,CAAWe,GAAA,CAAIF,KAAK,KAAK,EAAC;IACjDb,SAAA,CAAUgB,IAAA,CAAKP,QAAQ;IACvB,KAAK,CAAAT,SAAA,CAAWiB,GAAA,CAAIJ,KAAA,EAAOb,SAAS;IACpC,KAAKkB,MAAA,CAAO;MAAEC,IAAA,EAAM;MAASV;IAAS,CAAC;EACzC;EAEAW,OAAOX,QAAA,EAA8C;IACnD,MAAMI,KAAA,GAAQC,QAAA,CAASL,QAAQ;IAC/B,IAAI,KAAK,CAAAT,SAAA,CAAWqB,GAAA,CAAIR,KAAK,GAAG;MAC9B,MAAMb,SAAA,GAAY,KAAK,CAAAA,SAAA,CACpBe,GAAA,CAAIF,KAAK,GACRS,MAAA,CAAQC,CAAA,IAAMA,CAAA,KAAMd,QAAQ;MAChC,IAAIT,SAAA,EAAW;QACb,IAAIA,SAAA,CAAUwB,MAAA,KAAW,GAAG;UAC1B,KAAK,CAAAxB,SAAA,CAAWyB,MAAA,CAAOZ,KAAK;QAC9B,OAAO;UACL,KAAK,CAAAb,SAAA,CAAWiB,GAAA,CAAIJ,KAAA,EAAOb,SAAS;QACtC;MACF;IACF;IAEA,KAAKkB,MAAA,CAAO;MAAEC,IAAA,EAAM;MAAWV;IAAS,CAAC;EAC3C;EAEAiB,OAAOjB,QAAA,EAAiD;IACtD,MAAMkB,oBAAA,GAAuB,KAAK,CAAA3B,SAAA,CAC/Be,GAAA,CAAID,QAAA,CAASL,QAAQ,CAAC,GACrBmB,IAAA,CAAMC,CAAA,IAAMA,CAAA,CAAErB,KAAA,CAAMsB,MAAA,KAAW,SAAS;IAI5C,OAAO,CAACH,oBAAA,IAAwBA,oBAAA,KAAyBlB,QAAA;EAC3D;EAEAsB,QAAQtB,QAAA,EAA0D;IAChE,MAAMuB,aAAA,GAAgB,KAAK,CAAAhC,SAAA,CACxBe,GAAA,CAAID,QAAA,CAASL,QAAQ,CAAC,GACrBmB,IAAA,CAAMC,CAAA,IAAMA,CAAA,KAAMpB,QAAA,IAAYoB,CAAA,CAAErB,KAAA,CAAMyB,QAAQ;IAElD,OAAOD,aAAA,EAAeE,QAAA,CAAS,KAAKC,OAAA,CAAQC,OAAA,CAAQ;EACtD;EAEAC,MAAA,EAAc;IACZ7C,aAAA,CAAc8C,KAAA,CAAM,MAAM;MACxB,KAAKC,MAAA,CAAO,EAAEC,OAAA,CAAS/B,QAAA,IAAa;QAClC,KAAKW,MAAA,CAAOX,QAAQ;MACtB,CAAC;IACH,CAAC;EACH;EAEA8B,OAAA,EAA0B;IACxB,OAAO,CAAC,GAAG,KAAK,CAAAvC,SAAA,CAAWyC,MAAA,CAAO,CAAC,EAAEC,IAAA,CAAK;EAC5C;EAEAd,KAMEe,OAAA,EAC2D;IAC3D,MAAMC,gBAAA,GAAmB;MAAEC,KAAA,EAAO;MAAM,GAAGF;IAAQ;IAEnD,OAAO,KAAKJ,MAAA,CAAO,EAAEX,IAAA,CAAMnB,QAAA,IACzBf,aAAA,CAAckD,gBAAA,EAAkBnC,QAAQ,CAC1C;EACF;EAEAqC,QAAQH,OAAA,GAA2B,CAAC,GAAoB;IACtD,OAAO,KAAKJ,MAAA,CAAO,EAAEjB,MAAA,CAAQb,QAAA,IAAaf,aAAA,CAAciD,OAAA,EAASlC,QAAQ,CAAC;EAC5E;EAEAS,OAAO6B,KAAA,EAAiC;IACtCvD,aAAA,CAAc8C,KAAA,CAAM,MAAM;MACxB,KAAKU,SAAA,CAAUR,OAAA,CAASS,QAAA,IAAa;QACnCA,QAAA,CAASF,KAAK;MAChB,CAAC;IACH,CAAC;EACH;EAEAG,sBAAA,EAA0C;IACxC,MAAMC,eAAA,GAAkB,KAAKZ,MAAA,CAAO,EAAEjB,MAAA,CAAQC,CAAA,IAAMA,CAAA,CAAEf,KAAA,CAAMyB,QAAQ;IAEpE,OAAOzC,aAAA,CAAc8C,KAAA,CAAM,MACzBH,OAAA,CAAQiB,GAAA,CACND,eAAA,CAAgBE,GAAA,CAAK5C,QAAA,IAAaA,QAAA,CAASyB,QAAA,CAAS,EAAEoB,KAAA,CAAM3D,IAAI,CAAC,CACnE,CACF;EACF;AACF;AAEA,SAASmB,SAASL,QAAA,EAAwC;EACxD,OAAOA,QAAA,CAASF,OAAA,CAAQM,KAAA,EAAO0C,EAAA,IAAMC,MAAA,CAAO/C,QAAA,CAASP,UAAU;AACjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}