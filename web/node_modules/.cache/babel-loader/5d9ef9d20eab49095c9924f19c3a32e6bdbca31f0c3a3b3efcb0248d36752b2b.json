{"ast":null,"code":"import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { format } from \"./format.js\";\n\n/**\n * The {@link formatRelative} function options.\n */\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * @param date - The date to format\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The date in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(subDays(new Date(), 6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\nexport function formatRelative(date, baseDate, options) {\n  const [date_, baseDate_] = normalizeDates(options?.in, date, baseDate);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;\n  const diff = differenceInCalendarDays(date_, baseDate_);\n  if (isNaN(diff)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  let token;\n  if (diff < -6) {\n    token = \"other\";\n  } else if (diff < -1) {\n    token = \"lastWeek\";\n  } else if (diff < 0) {\n    token = \"yesterday\";\n  } else if (diff < 1) {\n    token = \"today\";\n  } else if (diff < 2) {\n    token = \"tomorrow\";\n  } else if (diff < 7) {\n    token = \"nextWeek\";\n  } else {\n    token = \"other\";\n  }\n  const formatStr = locale.formatRelative(token, date_, baseDate_, {\n    locale,\n    weekStartsOn\n  });\n  return format(date_, formatStr, {\n    locale,\n    weekStartsOn\n  });\n}\n\n// Fallback for modularized imports:\nexport default formatRelative;","map":{"version":3,"names":["defaultLocale","getDefaultOptions","normalizeDates","differenceInCalendarDays","format","formatRelative","date","baseDate","options","date_","baseDate_","in","defaultOptions","locale","weekStartsOn","diff","isNaN","RangeError","token","formatStr"],"sources":["/Users/godiswithyou/Downloads/FS-PandaMarket-Template-10-main 2/web/node_modules/date-fns/formatRelative.js"],"sourcesContent":["import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { format } from \"./format.js\";\n\n/**\n * The {@link formatRelative} function options.\n */\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * @param date - The date to format\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The date in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(subDays(new Date(), 6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\nexport function formatRelative(date, baseDate, options) {\n  const [date_, baseDate_] = normalizeDates(options?.in, date, baseDate);\n\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const diff = differenceInCalendarDays(date_, baseDate_);\n\n  if (isNaN(diff)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let token;\n  if (diff < -6) {\n    token = \"other\";\n  } else if (diff < -1) {\n    token = \"lastWeek\";\n  } else if (diff < 0) {\n    token = \"yesterday\";\n  } else if (diff < 1) {\n    token = \"today\";\n  } else if (diff < 2) {\n    token = \"tomorrow\";\n  } else if (diff < 7) {\n    token = \"nextWeek\";\n  } else {\n    token = \"other\";\n  }\n\n  const formatStr = locale.formatRelative(token, date_, baseDate_, {\n    locale,\n    weekStartsOn,\n  });\n  return format(date_, formatStr, { locale, weekStartsOn });\n}\n\n// Fallback for modularized imports:\nexport default formatRelative;\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,yBAAyB;AACvD,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,wBAAwB,QAAQ,+BAA+B;AACxE,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACtD,MAAM,CAACC,KAAK,EAAEC,SAAS,CAAC,GAAGR,cAAc,CAACM,OAAO,EAAEG,EAAE,EAAEL,IAAI,EAAEC,QAAQ,CAAC;EAEtE,MAAMK,cAAc,GAAGX,iBAAiB,CAAC,CAAC;EAC1C,MAAMY,MAAM,GAAGL,OAAO,EAAEK,MAAM,IAAID,cAAc,CAACC,MAAM,IAAIb,aAAa;EACxE,MAAMc,YAAY,GAChBN,OAAO,EAAEM,YAAY,IACrBN,OAAO,EAAEK,MAAM,EAAEL,OAAO,EAAEM,YAAY,IACtCF,cAAc,CAACE,YAAY,IAC3BF,cAAc,CAACC,MAAM,EAAEL,OAAO,EAAEM,YAAY,IAC5C,CAAC;EAEH,MAAMC,IAAI,GAAGZ,wBAAwB,CAACM,KAAK,EAAEC,SAAS,CAAC;EAEvD,IAAIM,KAAK,CAACD,IAAI,CAAC,EAAE;IACf,MAAM,IAAIE,UAAU,CAAC,oBAAoB,CAAC;EAC5C;EAEA,IAAIC,KAAK;EACT,IAAIH,IAAI,GAAG,CAAC,CAAC,EAAE;IACbG,KAAK,GAAG,OAAO;EACjB,CAAC,MAAM,IAAIH,IAAI,GAAG,CAAC,CAAC,EAAE;IACpBG,KAAK,GAAG,UAAU;EACpB,CAAC,MAAM,IAAIH,IAAI,GAAG,CAAC,EAAE;IACnBG,KAAK,GAAG,WAAW;EACrB,CAAC,MAAM,IAAIH,IAAI,GAAG,CAAC,EAAE;IACnBG,KAAK,GAAG,OAAO;EACjB,CAAC,MAAM,IAAIH,IAAI,GAAG,CAAC,EAAE;IACnBG,KAAK,GAAG,UAAU;EACpB,CAAC,MAAM,IAAIH,IAAI,GAAG,CAAC,EAAE;IACnBG,KAAK,GAAG,UAAU;EACpB,CAAC,MAAM;IACLA,KAAK,GAAG,OAAO;EACjB;EAEA,MAAMC,SAAS,GAAGN,MAAM,CAACR,cAAc,CAACa,KAAK,EAAET,KAAK,EAAEC,SAAS,EAAE;IAC/DG,MAAM;IACNC;EACF,CAAC,CAAC;EACF,OAAOV,MAAM,CAACK,KAAK,EAAEU,SAAS,EAAE;IAAEN,MAAM;IAAEC;EAAa,CAAC,CAAC;AAC3D;;AAEA;AACA,eAAeT,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}