{"ast":null,"code":"var _jsxFileName = \"/Users/godiswithyou/Downloads/FS-PandaMarket-Template-10-main 2/web/src/components/UI/TagInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport InputItem from \"./InputItem\";\nimport { FlexContainer } from \"../../styles/CommonStyles\";\nimport DeleteButton from \"./DeleteButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TagButtonsSection = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-top: 12px;\n  flex-wrap: wrap; // 태그가 길어지면 다음 줄로 넘어가도록 함\n`;\n_c = TagButtonsSection;\nconst Tag = styled(FlexContainer)`\n  background-color: ${({\n  theme\n}) => theme.colors.gray[2]};\n  color: ${({\n  theme\n}) => theme.colors.black};\n  padding: 14px 14px 14px 16px;\n  border-radius: 999px;\n  min-width: 100px;\n`;\n_c2 = Tag;\nconst TagText = styled.span`\n  font-size: 16px;\n  line-height: 24px;\n  margin-right: 8px;\n  max-width: calc(100% - 28px); // DeleteButton 너비 및 margin을 제외한 공간\n  /* 태그의 텍스트가 너무 길어 한 줄 내에 표시하기 어려운 경우 말줄임 처리 */\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n_c3 = TagText;\nfunction TagInput({\n  value,\n  onChange\n}) {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [tags, setTags] = useState(value);\n  const [error, setErrors] = useState(\"\");\n\n  // 중복 등록 막기 위해 tags 배열에 없는 것 확인하고 삽입\n  const addTag = tag => {\n    const nextTags = [...tags];\n    if (!tags.includes(tag)) {\n      nextTags.push(tag);\n    }\n    onChange(nextTags);\n  };\n  const removeTag = tagToRemove => {\n    const nextTags = tags.filter(tag => tag !== tagToRemove);\n    onChange(nextTags);\n  };\n\n  // 엔터 키 누르면 tags 배열에 input 값을 추가\n  const handlePressEnter = event => {\n    // 여러 자모를 결합해 하나의 글자를 만드는 아시아 언어권에서는 IME(입력 메소드 에디터)를 통해 브라우저에 글자를 입력해요.\n    // 사용자가 글자를 완전히 조합하기 전에는 isComposing의 값이 true로 설정됩니다.\n    // 한글 입력 시에 마지막 글자가 하이라이트되는 현상을 보신 적 있을 거예요. 이게 바로 isComposing이 true인 상태로, 아직 입력이 확정되지 않았음을 시각적으로 나타내는 거예요.\n    // 만약 마지막 음절이 태그 배열에 중복으로 추가되는 현상이 있었다면 바로 이 이슈 때문이었을 거예요.\n    // 이 코드를 추가하면 사용자가 아직 입력을 완료하지 않았을 때 함수의 나머지 부분이 실행되지 않도록 하여, 완성되지 않은 입력이 태그로 잘못 추가되는 것을 방지할 수 있어요.\n    if (event.nativeEvent.isComposing) return;\n    const inputString = text.trim();\n    if (event.key === \"Enter\") {\n      event.preventDefault(); // 엔터 키 눌렀을 때 form이 제출되지 않도록 꼭 추가해 주세요!\n\n      if (inputString && !error) {\n        addTag(inputString);\n        setText(\"\"); // 태그 추가 후 input field 초기화\n      }\n    }\n  };\n  const validateTag = newTag => {\n    if (newTag.length > 5) {\n      setErrors(prev => \"태그는 5글자 이내로 입력해주세요.\");\n    } else {\n      setErrors(prev => \"\");\n    }\n  };\n  useEffect(() => {\n    setTags(value);\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InputItem, {\n      label: \"\\uD0DC\\uADF8\",\n      value: text,\n      placeholder: \"\\uD0DC\\uADF8\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\",\n      onKeyDown: handlePressEnter,\n      onChange: e => {\n        setText(e.target.value);\n        validateTag(e.target.value);\n      },\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), (tags === null || tags === void 0 ? void 0 : tags.length) > 0 && /*#__PURE__*/_jsxDEV(TagButtonsSection, {\n      children: tags.map(tag => /*#__PURE__*/_jsxDEV(Tag, {\n        children: [/*#__PURE__*/_jsxDEV(TagText, {\n          children: tag\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n          onClick: () => removeTag(tag),\n          label: `${tag} 태그`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this)]\n      }, `tag-${tag}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(TagInput, \"PZMugHvfPNxO1koi4dzUbqmCHNg=\");\n_c4 = TagInput;\nexport default TagInput;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TagButtonsSection\");\n$RefreshReg$(_c2, \"Tag\");\n$RefreshReg$(_c3, \"TagText\");\n$RefreshReg$(_c4, \"TagInput\");","map":{"version":3,"names":["React","useEffect","useState","styled","InputItem","FlexContainer","DeleteButton","jsxDEV","_jsxDEV","TagButtonsSection","div","_c","Tag","theme","colors","gray","black","_c2","TagText","span","_c3","TagInput","value","onChange","_s","text","setText","tags","setTags","error","setErrors","addTag","tag","nextTags","includes","push","removeTag","tagToRemove","filter","handlePressEnter","event","nativeEvent","isComposing","inputString","trim","key","preventDefault","validateTag","newTag","length","prev","children","label","placeholder","onKeyDown","e","target","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c4","$RefreshReg$"],"sources":["/Users/godiswithyou/Downloads/FS-PandaMarket-Template-10-main 2/web/src/components/UI/TagInput.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport InputItem from \"./InputItem\";\nimport { FlexContainer } from \"../../styles/CommonStyles\";\nimport DeleteButton from \"./DeleteButton\";\n\nconst TagButtonsSection = styled.div`\n  display: flex;\n  gap: 12px;\n  margin-top: 12px;\n  flex-wrap: wrap; // 태그가 길어지면 다음 줄로 넘어가도록 함\n`;\n\nconst Tag = styled(FlexContainer)`\n  background-color: ${({ theme }) => theme.colors.gray[2]};\n  color: ${({ theme }) => theme.colors.black};\n  padding: 14px 14px 14px 16px;\n  border-radius: 999px;\n  min-width: 100px;\n`;\n\nconst TagText = styled.span`\n  font-size: 16px;\n  line-height: 24px;\n  margin-right: 8px;\n  max-width: calc(100% - 28px); // DeleteButton 너비 및 margin을 제외한 공간\n  /* 태그의 텍스트가 너무 길어 한 줄 내에 표시하기 어려운 경우 말줄임 처리 */\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nfunction TagInput({ value, onChange }) {\n  const [text, setText] = useState(\"\");\n  const [tags, setTags] = useState(value);\n  const [error, setErrors] = useState(\"\");\n\n  // 중복 등록 막기 위해 tags 배열에 없는 것 확인하고 삽입\n  const addTag = (tag) => {\n    const nextTags = [...tags];\n    if (!tags.includes(tag)) {\n      nextTags.push(tag);\n    }\n    onChange(nextTags);\n  };\n\n  const removeTag = (tagToRemove) => {\n    const nextTags = tags.filter((tag) => tag !== tagToRemove);\n    onChange(nextTags);\n  };\n\n  // 엔터 키 누르면 tags 배열에 input 값을 추가\n  const handlePressEnter = (event) => {\n    // 여러 자모를 결합해 하나의 글자를 만드는 아시아 언어권에서는 IME(입력 메소드 에디터)를 통해 브라우저에 글자를 입력해요.\n    // 사용자가 글자를 완전히 조합하기 전에는 isComposing의 값이 true로 설정됩니다.\n    // 한글 입력 시에 마지막 글자가 하이라이트되는 현상을 보신 적 있을 거예요. 이게 바로 isComposing이 true인 상태로, 아직 입력이 확정되지 않았음을 시각적으로 나타내는 거예요.\n    // 만약 마지막 음절이 태그 배열에 중복으로 추가되는 현상이 있었다면 바로 이 이슈 때문이었을 거예요.\n    // 이 코드를 추가하면 사용자가 아직 입력을 완료하지 않았을 때 함수의 나머지 부분이 실행되지 않도록 하여, 완성되지 않은 입력이 태그로 잘못 추가되는 것을 방지할 수 있어요.\n    if (event.nativeEvent.isComposing) return;\n\n    const inputString = text.trim();\n    if (event.key === \"Enter\") {\n      event.preventDefault(); // 엔터 키 눌렀을 때 form이 제출되지 않도록 꼭 추가해 주세요!\n\n      if (inputString && !error) {\n        addTag(inputString);\n        setText(\"\"); // 태그 추가 후 input field 초기화\n      }\n    }\n  };\n\n  const validateTag = (newTag) => {\n    if (newTag.length > 5) {\n      setErrors((prev) => \"태그는 5글자 이내로 입력해주세요.\");\n    } else {\n      setErrors((prev) => \"\");\n    }\n  };\n\n  useEffect(() => {\n    setTags(value);\n  }, [value]);\n\n  return (\n    <div>\n      <InputItem\n        label=\"태그\"\n        value={text}\n        placeholder=\"태그를 입력해 주세요\"\n        onKeyDown={handlePressEnter}\n        onChange={(e) => {\n          setText(e.target.value);\n          validateTag(e.target.value);\n        }}\n        error={error}\n      />\n\n      {/* tags 배열이 비어있으면 TagButtonsSection을 렌더링하지 않음 */}\n      {tags?.length > 0 && (\n        <TagButtonsSection>\n          {tags.map((tag) => (\n            <Tag key={`tag-${tag}`}>\n              <TagText>{tag}</TagText>\n\n              <DeleteButton\n                onClick={() => removeTag(tag)}\n                label={`${tag} 태그`}\n              />\n            </Tag>\n          ))}\n        </TagButtonsSection>\n      )}\n    </div>\n  );\n}\n\nexport default TagInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}